server:
  port: 7047
  servlet:
   session:
     cookie:
       name: SESSIONMISCOORDER 
  
#服务的名称
spring:
  application:
    name: misco-order
    #配置zipkin
  zipkin:
    #base-url: http://localhost:9411/ #zipkin的服务的地址 （如果启用rabbit 需要注释掉 不让zipkin 直接推送到 server了）
    sender:
      #type: web  #已http的请求方式发送到我们的zipkin server
      type: rabbit #传输方式是rabbit
  sleuth:
    sampler:
      probability: 1 #采样比例 就是链路的比例 1 标识全部 0.1 标识10分一的比例采集
  rabbitmq: #配置rabbitmq
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
    listener: #重试策略
      direct:
        retry:
          enabled: true
      simple:
        retry:
          enabled: true  
  jpa:
    show-sql: true
#设置负载机制 默认是轮询
misco-product:
  ribbon:
    #NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #举例 这个是随机负载
            #设置超时机制 - spring-retry
    ConnectTimeout: 250 #单位是毫秒 连接超时时间  如超过 自动切换下一个服务实例  
    ReadTimeout: 1000 #单位是毫秒 返回数据等待时间  如超过 自动切换下一个服务实例
    OkToRetryOnAllOperations: true #是否对所有操作进行重试
    MaxAutoRetries: 1 #对当前实例重试次数
    MaxAutoRetriesNextServer: 1 #重试切换实例次数

#Feign 配置
feign:
  client:
    config:
      default:
        connect-timeout: 250 
        read-timeout: 3000 #这个类似resttemplte 的 hystrix.commamd.default.execution.isolation.thread.timeoutInMilliseconds 默认也是1s的
      misco-product: #服务名称
          loggerLevel:  FULL # NONE （不记录任何日志（默认值） ） BASE （仅记录请求方法、URL、响应状态代码以及执行时间 ）  HEADERS（记录请求和响应的header。 ） FULL 所有信息 （记录请求和响应的header、body和元数 据。#），
          connect-timeout: 250
          read-timeout: 3000 
  #hystrix 默认关闭 需要开启
  hystrix:
    enabled: true
logging:
  level:
    com.misco.server.feign.ProductFeign: debug  #针对这个类进行日志打印
    #开启sprig mvc 和 sleuth 的日志
    root: info
    org.springframework.web.servlet.DispatcherServlet: debug
    org.springframework.cloud.sleuth: debug 
    
eureka:
  client:
    service-url:
      defaultZone: http://localhost:7048/eureka/,http://localhost:7049/eureka/ #以逗号分隔 有多少注册中心就写多少个
  instance:
    prefer-ip-address: true # 使用ip进行注册
    instance-id: ${spring.cloud.client.ip-address}:${server.port} #向注册中心注册的服务ID
      #服务提供者默认30s 心跳间隔 ，90s 内如无心跳则 任务与我宕机了 需要修改时间间隔
    lease-renewal-interval-in-seconds: 5 #心跳间隔
    lease-expiration-duration-in-seconds: 10 #10s内 如无心跳 任务宕机

#进行熔断器 Hystrix配置 针对restTimeplat 需要和 @hystrixCommad  
hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: ExecutionIsolationStrategy.SEMAPHORE # 信号量
          maxConcurrentRequests: 100 #当超过100个请求直接进行熔断 不进行处理 信号量的设置
          thread:
            timeoutInMilliseconds:  3000 # 默认3s 返回数据的响应  
      circuitBreaker: 
        requestVolumeThreshold: 5 #触发熔断器的总的请求数 默认20
        sleepWindowInMilliseconds: 10000 # 默认是5s 心跳
        errorThresholdPercentage: 50 #错误比例 默认50%
        
            
            
management:
  endpoints:
    web:
      exposure:
        include: '*'
        
